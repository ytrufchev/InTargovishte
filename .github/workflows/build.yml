name: CI and Docker Image Publish

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened]

env:
  REGISTRY: ytrufchev
  IMAGE_NAME: intargovishte

jobs:
  build_and_publish:
    if: github.ref == 'refs/heads/main'
    name: Build, Analyze, and Publish Docker Image (Main Only)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=ytrufchev_InTargovishte

      - name: Login to Docker Hub
        run: |
          echo ${{ secrets.PAT }} | docker login -u ${{ github.actor }} --password-stdin

      - name: Build and Publish Docker Image
        run: |
          docker build . --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy_production:
    if: github.ref == 'refs/heads/main'
    name: Deploy to Production
    needs: build_and_publish
    runs-on: ubuntu-latest

    steps:
      - name: Install SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      - name: Connect and Deploy
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker compose pull && docker compose up -d"

      - name: Cleanup
        run: rm -rf ~/.ssh

  deploy_test:
    if: github.ref == 'refs/heads/develop'
    name: Deploy to Test Server
    runs-on: ubuntu-latest

    steps:
      - name: Install SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.TEST_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.TEST_SSH_HOST }} > ~/.ssh/known_hosts

      - name: Connect and Deploy
        run: ssh ${{ secrets.TEST_SSH_USER }}@${{ secrets.TEST_SSH_HOST }} "sudo docker-compose pull && docker-compose up -d"

      - name: Cleanup
        run: rm -rf ~/.ssh
